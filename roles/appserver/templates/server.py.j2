import asyncio
import json
import logging
import websockets
import ssl

from datetime import datetime

logging.basicConfig(filename='/var/log/{{ app_name }}.log', level='WARNING')

logger = logging.getLogger('websockets.server')
logger.setLevel(logging.ERROR)
logger.addHandler(logging.FileHandler('/var/log/{{ app_name }}.websockets.error'))

MIN_MESSAGE_BURST_SPACING = 500000 # in microseconds

STATE = {'value': 0}

USERS = set()

def state_event():
    return json.dumps({'type': 'state', **STATE})

def users_event():
    return json.dumps({'type': 'users', 'count': len(USERS)})

async def notify_state():
    if USERS:
        message = state_event()
        await asyncio.wait([user.send(message) for user in USERS])

async def notify_users():
    if USERS:
        message = users_event()
        await asyncio.wait([user.send(message) for user in USERS])

async def register(websocket):
    USERS.add(websocket)
    await notify_users()

async def unregister(websocket):
    USERS.remove(websocket)
    await notify_users()

async def counter(websocket, path):
    await register(websocket)
    try:
        await websocket.send(state_event())

        subscript = 0
        time_zero = datetime.now()

        async for message in websocket:
            subscript += 1
            
            if subscript == 5:  
                subscript = 0
                time_now = datetime.now()
                td = time_now - time_zero
                logging.warning(f'td.days={td.days},td.seconds={td.seconds},td.microseconds={td.microseconds}')
                if td.days == 0 and td.seconds == 0 and td.microseconds < MIN_MESSAGE_BURST_SPACING:
                    raise Exception('Bot detected')
                time_zero = datetime.now()
            
            data = json.loads(message)
            if data['action'] == 'minus':
                STATE['value'] -= 1
                await notify_state()
            elif data['action'] == 'plus':
                STATE['value'] += 1
                await notify_state()
            else:
                logging.error(f'unsupported event: {data}')
    finally:
        await unregister(websocket)

context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
context.load_cert_chain('/etc/letsencrypt/live/test.daveottley.com/fullchain.pem', '/etc/letsencrypt/live/test.daveottley.com/privkey.pem')

start_server = websockets.serve(counter, '{{ ip_address }}', {{ websockets_port }}, ssl=context)

asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()